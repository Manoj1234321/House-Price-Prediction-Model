from sklearn import datasets
import pandas as pd
housing=datasets.load_boston()
x=housing.data
y=housing.target
X=pd.DataFrame(x,columns=['CRIM','ZN','INDUS','CHAS','NOX','RM','AGE','DIS','RAD','TAX','PTRATIO','B','LSTAT'])
Y=pd.DataFrame(y,columns=['MEDV'])
data=pd.concat([X,Y],axis=1)
print(data.head())
print()



print('Data Shape',data.shape)
X=data[['LSTAT']].values
y=data[['MEDV']].values
from sklearn.tree import DecisionTreeRegressor
from matplotlib import pyplot as plt
def lin_regplot(X,y,model):
    plt.scatter(X,y,c='steelblue',edgecolor='white',s=70)
    plt.plot(X,model.predict(X),color='black',lw=2)
    return None




tree=DecisionTreeRegressor(max_depth=3)
tree.fit(X,y)
sort_idx=X.flatten().argsort()
lin_regplot(X[sort_idx],y[sort_idx],tree)
plt.xlabel('%lower status of population')
plt.ylabel('%price in $100s')
plt.show()
X=data.iloc[:,:-1].values
y=data['MEDV'].values



from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.4,random_state=1)
from sklearn.ensemble import RandomForestRegressor
forest=RandomForestRegressor(n_estimators=1000,criterion='mse',random_state=1,n_jobs=1)
forest.fit(X_train,y_train)
y_train_pred=forest.predict(X_train)
y_test_pred=forest.predict(X_test)
from sklearn.metrics import mean_squared_error
t_train=mean_squared_error(y_train,y_train_pred)
t_test=mean_squared_error(y_test,y_test_pred)
print('MSE Train: %.3f,MSE test:%.3f'%(t_train,t_test))
##



from sklearn.metrics import r2_score
t_train1=r2_score(y_train,y_train_pred)
t_test1=r2_score(y_test,y_test_pred)
print('MSE Train: %.3f,MSE test:%.3f'%(t_train1,t_test1))      
      
      


